@page "/tripdetails/{id}"
@using GroupTrip.Shared.Models
@using Microsoft.AspNetCore.Blazor.Services
@inject HttpClient Http
@inject IUriHelper UriHelper

<h1>Trip: @_trip.Location</h1>

@if (_trip == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <table class='table'>
    <thead>
    <tr>
      <th></th>
      <th></th>
    </tr>
    </thead>
    <tbody>
    <tr>
      <td>Description: </td>
      <td>@_trip.Description</td>
    </tr>
    <tr>
      <td>Groups  <button class="btn-info" onclick="@(() => ModalAddGroup(_trip.Id))">+</button></td>
      @foreach (var group in _groups)
      {
        <tr>
          <td>
            <a href='/groupdetails/@group.Id'>@group.Name</a>
          </td>
          <td>
            <button class="btn-danger" onclick="@(async () => await DeleteGroup(group.Id))">x</button>
          </td>
        </tr>
      }
    </tr>
    </tbody>
  </table>
}

@if (IsAdd)
{
  <div class="modal" tabindex="-1" style="display: block" role="dialog">
    <div class="modal-dialog">
      <div class="modal-content">

        <!-- Modal Header -->
        <div class="modal-header">
          <h4 class="modal-title">Create New Group</h4>
          <button type="button" class="close" data-dismiss="modal" onclick="@CloseModal">&times;</button>
        </div>

        <!-- Modal body -->
        <div class="modal-body">
          <input type="hidden" id="tripId" bind=@_group.TripId/>
          <label for="GroupName" class="control-label">Name</label>
          <input for="GroupName" class="form-control" bind="@_group.Name"/>
        </div>

        <!-- Modal footer -->
        <div class="modal-footer">
          <button type="button" class="btn" data-dismiss="modal" onclick="@CloseModal">Cancel</button>
          <button type="button" class="btn btn-primary" onclick="@AddGroup">Confirm</button>
        </div>

      </div>
    </div>
  </div>
}

@functions {

  [Parameter]
  private string id { get; set; }

  Trip _trip = new Trip();
  Group[] _groups = new Group[0];
  bool IsAdd;
  Group _group = new Group();

  protected override async Task OnInitAsync()
  {
    IsAdd = false;
    _trip = await Http.GetJsonAsync<Trip>("/api/Trips/Details/" + id);
    _groups = await Http.GetJsonAsync<Group[]>("api/Groups/Index/" + id);
  }

  async Task DeleteGroup(int groupId)
  {
    var url = "/api/Groups/Delete/" + groupId;
    _groups = _groups.Where(g => g.Id != groupId).ToArray();
    await Http.DeleteAsync(url);
  }

  void ModalAddGroup(int id)
  {
    _group.TripId = id;
    IsAdd = true;
  }

  void CloseModal()
  {
    IsAdd = false;
  }

  async Task AddGroup()
  {
    CloseModal();
    await Http.SendJsonAsync(HttpMethod.Post, "api/Groups/Create", _group);
    _groups = await Http.GetJsonAsync<Group[]>("api/Groups/Index/" + id);
    _group = new Group();
  }

}