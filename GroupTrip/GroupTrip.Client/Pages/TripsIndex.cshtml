@using GroupTrip.Shared.Models
@page "/tripsindex"
@inject HttpClient Http

<h1>All Trips</h1>

<p>
    <a href="/addtrip">Create New</a>
</p>

@if (_tripsList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class='table'>
        <thead>
        <tr>
            <th>Location</th>
          <th>Description</th>
          <th>Groups</th>
            <th>Start Date</th>
            <th>End Date</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var trip in _tripsList)
        {
            <tr style="background-color:@(DateTime.Now > trip.EndDate ? "red" : "green")">
                <td>@trip.Location</td>
               <td>@trip.Description</td>
              <td>
                @foreach (var group in trip.Groups)
                {
                  <a href='/groupdetails/@group.Id'>@group.Name</a><br/>
                  <a onclick="@(async () => await DeleteGroup(group.Id))">Delete</a>
                }
              </td>
                <td>@trip.StartDate</td>
                <td>@trip.EndDate</td>
                <td>
                    <a href='/edittrip/@trip.Id'>Edit</a>  |
                    <a onclick="@(async () => await Delete(trip.Id))">Delete</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@functions {
  Trip[] _tripsList;

  protected override async Task OnInitAsync()
  {
    _tripsList = new Trip[0];
    _tripsList = await Http.GetJsonAsync<Trip[]>("/api/Trips/Index");
  }

  async Task Delete(int id)
  {
    var url = "/api/Trips/Delete/" + id;
    await Http.DeleteAsync(url);
    _tripsList = _tripsList.Where(val => val.Id != id).ToArray();
  }

  async Task DeleteGroup(int groupId)
  {
    var url = "/api/Groups/Delete/" + groupId;
    await Http.DeleteAsync(url);
    var trip = _tripsList.First(t => t.Groups.Select(g => g.Id).Contains(groupId));
    trip.Groups = trip.Groups.Where(g => g.Id != groupId).ToList();
  }
}